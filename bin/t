#!/usr/bin/env bash

# determine if the tmux server is running
if tmux list-sessions &>/dev/null; then
	TMUX_RUNNING=0
else
	TMUX_RUNNING=1
fi

# determine the user's current position relative tmux:
# serverless - there is no running tmux server
# attached   - the user is currently attached to the running tmux server
# detached   - the user is currently not attached to the running tmux server
T_RUNTYPE="serverless"
if [ "$TMUX_RUNNING" -eq 0 ]; then
	if [ "$TMUX" ]; then # inside tmux
		T_RUNTYPE="attached"
	else # outside tmux
		T_RUNTYPE="detached"
	fi
fi

# display help text with an argument
if [ "$1" = "-h" ] || [ "$1" == "--help" ]; then
	printf "\n"
	printf "\033[1m  t - the smart tmux session manager\033[0m\n"
	printf "\033[37m  https://github.com/joshmedeski/t-smart-tmux-session-manager\n"
	printf "\n"
	printf "\033[32m  Run interactive mode\n"
	printf "\033[34m      t\n"
	printf "\033[34m        ctrl-t list only tmuxinator layouts\n"
	printf "\033[34m        ctrl-s list only tmux sessions\n"
	printf "\033[34m        ctrl-x list only zoxide results\n"
	printf "\033[34m        ctrl-f list results from the find command\n"
	printf "\n"
	printf "\033[32m  Go to session (matches tmuxinator layout, tmux session, zoxide result, or directory)\n"
	printf "\033[34m      t {name}\n"
	printf "\n"
	printf "\033[32m  Open popup (while in tmux)\n"

	if [ "$TMUX_RUNNING" -eq 0 ]; then
		T_BIND=$(tmux show-option -gvq "@t-bind")
		if [ "$T_BIND" = "" ]; then
			T_BIND="T"
		fi
		printf "\033[34m      <prefix>+%s\n" "$T_BIND"
		printf "\033[34m        ctrl-t list only tmuxinator layouts\n"
		printf "\033[34m        ctrl-s list only tmux sessions\n"
		printf "\033[34m        ctrl-x list only zoxide results\n"
		printf "\033[34m        ctrl-f list results from the find command\n"
	else
		printf "\033[34m      start tmux server to see bindings\n" "$T_BIND"
	fi

	printf "\n"
	printf "\033[32m  Show help\n"
	printf "\033[34m      t -h\n"
	printf "\033[34m      t --help\n"
	printf "\n"
	exit 0
fi

HOME_REPLACER=""                                          # default to a noop
echo "$HOME" | grep -E "^[a-zA-Z0-9\-_/.@]+$" &>/dev/null # chars safe to use in sed
HOME_SED_SAFE=$?
if [ $HOME_SED_SAFE -eq 0 ]; then # $HOME should be safe to use in sed
	HOME_REPLACER="s|^$HOME/|~/|"
fi

get_fzf_prompt() {
	local fzf_prompt
	local fzf_default_prompt='>  '
	if [ "$TMUX_RUNNING" -eq 0 ]; then
		fzf_prompt="$(tmux show -gqv '@t-fzf-prompt')"
	fi
	[ -n "$fzf_prompt" ] && echo "$fzf_prompt" || echo "$fzf_default_prompt"
}
PROMPT=$(get_fzf_prompt)

attach_session() {
	case $T_RUNTYPE in # attach to session
	attached)
		tmux switch-client -t "$1"
		;;
	detached)
		tmux attach -t "$1"
		;;
	serverless)
		tmux attach -t "$1"
		;;
	esac
}

create_session_from_path() {
	if [ "$1" = "" ]; then # no result
		exit 0                # exit silently
	fi

	if [ $HOME_SED_SAFE -eq 0 ]; then
		RESULT=$(echo "$1" | sed -e "s|^~/|$HOME/|") # get real home path back
	fi

	zoxide add "$RESULT" &>/dev/null # add to zoxide database
	FOLDER=$(basename "$RESULT")
	SESSION_NAME=$(echo "$FOLDER" | tr ' .:' '_')

	if [ "$T_RUNTYPE" != "serverless" ]; then
		SESSION=$(tmux list-sessions -F '#S' | grep "^$SESSION_NAME$") # find existing session
	fi

	if [ "$SESSION" = "" ]; then # session is missing
		SESSION="$SESSION_NAME"
		tmux new-session -d -s "$SESSION" -c "$RESULT" # create session
	fi

	attach_session "$SESSION"
}

SESSIONS_OUTPUT="tmux list-sessions -F '#{session_last_attached} #{session_name}' | sort --numeric-sort --reverse | awk '{print \"session> \" \$2}'"
LAYOUTS_OUTPUT='tmuxinator list | tail -n +2 | xargs -n 1 echo "layouts> "'
ZOXIDE_OUTPUT='zoxide query -l | sed -e "$HOME_REPLACER" | xargs -n 1 echo "zoxide> "'
FIND_OUTPUT='find ~ -maxdepth 3 -type d | xargs -n 1 echo "find> "'

BORDER_LABEL=" t - smart tmux session manager "
HEADER=" ^t tmuxifier ^s sessions ^x zoxide ^f find"
SESSION_BIND="ctrl-s:change-prompt(sessions> )+reload(eval '$SESSIONS_OUTPUT')"
ZOXIDE_BIND="ctrl-x:change-prompt(zoxide> )+reload(eval '$ZOXIDE_OUTPUT')"
LAYOUT_BIND="ctrl-t:change-prompt(layouts> )+reload(eval '$LAYOUTS_OUTPUT')"
TAB_BIND="tab:down,btab:up"
FIND_BIND="ctrl-f:change-prompt(find> )+reload(eval '$FIND_OUTPUT')"

if [ $# -eq 1 ]; then # argument provided
	tmuxinator list | tail -n +2 | grep -i "$1" &>/dev/null
	TMUXINATOR_RESULT_EXIT_CODE=$?
	if [ $TMUXINATOR_RESULT_EXIT_CODE -eq 0 ]; then # tmuxifier session result found
		RESULT=$(tmuxinator list | tail -n +2 | xargs -n 1 echo | grep -i "$1")
		tmuxinator start "${RESULT}"
	else # no zoxide result found
		zoxide query "$1" &>/dev/null
		ZOXIDE_RESULT_EXIT_CODE=$?
		if [ $ZOXIDE_RESULT_EXIT_CODE -eq 0 ]; then # zoxide result found
			RESULT=$(zoxide query "$1")
		else # no zoxide result found
			ls "$1" &>/dev/null
			LS_EXIT_CODE=$?
			if [ $LS_EXIT_CODE -eq 0 ]; then # directory found
				RESULT=$1
			else # no directory found
				echo "No directory found."
				exit 1
			fi
		fi
		create_session_from_path "${RESULT}"
	fi
else # argument not provided
	case $T_RUNTYPE in
	attached)
		RESULT=$(
			(eval $LAYOUTS_OUTPUT && eval $SESSIONS_OUTPUT && eval $ZOXIDE_OUTPUT) | fzf-tmux \
				--bind "$LAYOUT_BIND" \
				--bind "$FIND_BIND" \
				--bind "$SESSION_BIND" \
				--bind "$TAB_BIND" \
				--bind "$ZOXIDE_BIND" \
				--border-label "$BORDER_LABEL" \
				--header "$HEADER" \
				--no-sort \
				--prompt "$PROMPT" \
				-p 60%,50%
		)
		;;
	detached)
		RESULT=$(
			(eval $LAYOUTS_OUTPUT && eval $SESSIONS_OUTPUT && eval $ZOXIDE_OUTPUT) | fzf \
				--bind "$LAYOUT_BIND" \
				--bind "$FIND_BIND" \
				--bind "$SESSION_BIND" \
				--bind "$TAB_BIND" \
				--bind "$ZOXIDE_BIND" \
				--border-label "$BORDER_LABEL" \
				--header "$HEADER" \
				--no-sort \
				--prompt "$PROMPT"
		)
		;;
	serverless)
		RESULT=$(
			(eval $LAYOUTS_OUTPUT && eval $ZOXIDE_OUTPUT) | fzf \
				--bind "$LAYOUT_BIND" \
				--bind "$ZOXIDE_BIND" \
				--bind "$FIND_BIND" \
				--bind "$TAB_BIND" \
				--border-label "$BORDER_LABEL" \
				--header " ^t layouts ^x zoxide ^f find" \
				--no-sort \
				--prompt "$PROMPT"
		)
		;;
	esac
	if [[ "$RESULT" =~ ^layout ]]; then
		ACTUAL_RESULT="${RESULT:10}"
		tmuxinator start "$ACTUAL_RESULT"
	elif [[ "$RESULT" =~ ^zoxide ]]; then
		ACTUAL_RESULT="${RESULT:9}"
		create_session_from_path "$ACTUAL_RESULT"
	elif [[ "$RESULT" =~ ^session ]]; then
		ACTUAL_RESULT="${RESULT:9}"
		attach_session "$ACTUAL_RESULT"
	elif [[ "$RESULT" =~ ^find ]]; then
		ACTUAL_RESULT="${RESULT:7}"
		create_session_from_path "$ACTUAL_RESULT"
	fi
fi
